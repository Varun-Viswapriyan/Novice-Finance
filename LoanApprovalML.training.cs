﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace WebApplication4
{
    public partial class LoanApprovalML
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"Married", @"Married"),new InputOutputColumnPair(@"Education", @"Education"),new InputOutputColumnPair(@"Self_Employed", @"Self_Employed"),new InputOutputColumnPair(@"Propert1_Area", @"Propert1_Area")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Dependents", @"Dependents"),new InputOutputColumnPair(@"ApplicantIncome", @"ApplicantIncome"),new InputOutputColumnPair(@"Coapplica0tI0come", @"Coapplica0tI0come"),new InputOutputColumnPair(@"LoanAmount", @"LoanAmount"),new InputOutputColumnPair(@"Loan_Amount_Term", @"Loan_Amount_Term")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Gender",@"Married",@"Education",@"Self_Employed",@"Propert1_Area",@"Dependents",@"ApplicantIncome",@"Coapplica0tI0come",@"LoanAmount",@"Loan_Amount_Term"}))      
                                    .Append(mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options(){NumberOfLeaves=75,NumberOfIterations=4,MinimumExampleCountPerLeaf=186,LearningRate=0.999999776672986,LabelColumnName=@"Loan_Status",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=0.00336435853007234,FeatureFraction=0.795617339960647,L1Regularization=2.12824536672665E-10,L2Regularization=5.48475964360825E-07},MaximumBinCountPerFeature=400}));

            return pipeline;
        }
    }
}
